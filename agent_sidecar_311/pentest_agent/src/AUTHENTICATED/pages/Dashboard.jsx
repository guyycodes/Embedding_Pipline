import React, { useState, useContext } from 'react';
import {
  Box,
  Paper,
  Typography,
  Card,
  CardContent,
  CardMedia,
  Button,
  CssBaseline,
} from '@mui/material';
import { styled, keyframes } from '@mui/material/styles';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';
import { SearchContext } from '../components/CustomLayout';
import KeyboardArrowLeftIcon from '@mui/icons-material/KeyboardArrowLeft';
import AppGateway from '../components/ApplicationGateway';

// Styled components for the circular navigator
const NavContainer = styled(Box)(({ theme }) => ({
  position: 'relative',
  width: 256,
  height: 256,
  // On hover, update the nav buttonsâ€™ position and scale using the CSS variables (--x, --y)
  '&:hover .nav-button': {
    opacity: 1,
    transform: 'translate(-50%, -50%) scale(1)',
    left: 'calc(50% + var(--x))',
    top: 'calc(50% + var(--y))',
  },
}));

// The center button remains fixed at the center.
const CenterButton = styled(Button)(({ theme }) => ({
  position: 'absolute',
  left: '50%',
  top: '50%',
  transform: 'translate(-50%, -50%)',
  width: 48, // Reduced width
  height: 48, // Reduced height
  minWidth: 'auto',
  padding: 0, // Remove extra padding
  borderRadius: '50%',
  backgroundColor: theme.palette.primary.main,
  color: theme.palette.common.white,
  fontSize: '0.8rem', // Adjust font size for smaller button
  '&:hover': {
    backgroundColor: theme.palette.primary.dark,
    boxShadow: `0 0 20px ${theme.palette.primary.main}`,
  },
}));

// NavButton starts at the center with scale(0) and animates out on hover.
const NavButton = styled(Button)(({ theme }) => ({
  position: 'absolute',
  left: '50%', // start at center
  top: '50%',  // start at center
  transform: 'translate(-50%, -50%) scale(0)', // hidden initially
  minWidth: 'auto',
  padding: theme.spacing(2),
  borderRadius: '50px',
  backgroundColor: theme.palette.grey[800],
  color: theme.palette.common.white,
  transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
  opacity: 0,
  '&:hover': {
    backgroundColor: theme.palette.primary.main,
    boxShadow: `0 0 20px ${theme.palette.primary.main}`,
  },
  '&.active': {
    backgroundColor: theme.palette.primary.main,
  },
}));

const GlowingRing = styled(Box)(({ theme }) => ({
  position: 'absolute',
  inset: -10,
  borderRadius: '50%',
  background: `radial-gradient(circle, ${theme.palette.primary.main}20, transparent)`,
  opacity: 0,
  transition: 'opacity 0.3s ease',
  '.MuiButton-root:hover &': {
    opacity: 1,
  },
}));

const bounceAnimation = keyframes`
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-5px);
  }
`;

// Enhanced FooterArea with visual feedback
const FooterArea = styled(Box)(({ theme }) => ({
  position: 'fixed',
  bottom: 0,
  left: 0,
  width: '100%',
  height: 48, // Collapsed height
  backgroundColor: 'rgba(0, 0, 0, 0.8)',
  backdropFilter: 'blur(8px)',
  transition: 'all 0.3s ease',
  overflow: 'hidden',
  zIndex: theme.zIndex.drawer + 1,

  '&:hover': {
    height: 256, // Expanded height
    '& .footer-content': {
      opacity: 1,
    },
    '& .footer-gradient': {
      opacity: 1,
    },
    '& .footer-indicator': {
      transform: 'translate(-50%, -4px)',
    },
  },
}));

const FooterContent = styled(Box)({
  width: '100%',
  height: '100%',
  paddingTop: 48,
  opacity: 0,
  transition: 'opacity 0.3s ease 0.15s',
});

const FooterGradient = styled(Box)(({ theme }) => ({
  position: 'absolute',
  inset: 0,
  background: `linear-gradient(to top, ${theme.palette.background.default}80, transparent)`,
  opacity: 0,
  transition: 'opacity 0.3s ease',
}));

const Indicator = styled(Box)(({ theme }) => ({
  position: 'absolute',
  top: 0,
  left: '50%',
  transform: 'translate(-50%, 0)',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  transition: 'transform 0.3s ease',
  '& .MuiSvgIcon-root': {
    animation: `${bounceAnimation} 2s infinite ease-in-out`,
    color: theme.palette.grey[400],
  },
}));

// Enhanced Footer Component
const EnhancedFooter = ({ children }) => {
  return (
    <FooterArea>
      <Indicator className="footer-indicator">
        <KeyboardArrowUpIcon />
        <Typography variant="caption" sx={{ color: 'grey.400', mt: 0.5 }}>
          More Tools
        </Typography>
      </Indicator>

      <FooterGradient className="footer-gradient" />

      <FooterContent className="footer-content">
        {children}
      </FooterContent>
    </FooterArea>
  );
};

// Circular Navigator Component
const CircularNavigator = ({ onCategorySelect, activeCategory }) => {
  const categories = ['Study', 'Learn', 'Develop', 'All Apps'];
  const radius = 100; // Distance from the center button

  return (
    <Box
      sx={{
        position: 'absolute',
        bottom: 0, // Position relative to the FooterArea
        left: '50%',
        transform: 'translateX(-50%)',
      }}
    >
      <NavContainer>
        <CenterButton>
          <Typography variant="button">Apps</Typography>
        </CenterButton>

        {categories.map((category, index) => {
          // Calculate the angle for each button around the circle
          const angle = (index * 360) / categories.length;
          const radian = (angle * Math.PI) / 180;
          const x = radius * Math.cos(radian);
          const y = radius * Math.sin(radian);

          return (
            <NavButton
              key={category}
              onClick={() => onCategorySelect(category)}
              className={`nav-button ${activeCategory === category ? 'active' : ''}`}
              // Pass the computed offset as CSS variables
              sx={{
                '--x': `${x}px`,
                '--y': `${y}px`,
              }}
            >
              <Typography variant="button" sx={{ whiteSpace: 'nowrap' }}>
                {category}
              </Typography>
              <GlowingRing />
            </NavButton>
          );
        })}
      </NavContainer>
    </Box>
  );
};

// Main Dashboard Component
const DashboardGateway = () => {
  const { searchQuery } = useContext(SearchContext);
  const [activeCategory, setActiveCategory] = useState('All Apps');

  const [apps] = useState([
    { id: 1, name: 'Lead Management', category: 'Studio Portal', url: 'lead-management' },
    { id: 2, name: 'Member Management', category: 'Studio Portal', url: 'member-management' },
    { id: 3, name: 'Revenue Management', category: 'Grow Apps', url: 'revenue-management' },
    { id: 4, name: 'Portfolio Performance', category: 'Mall Apps', url: 'portfolio' },
  ]);
  const [activeApp, setActiveApp] = useState(null);

  const filteredApps = apps.filter(
    (app) =>
      app.name.toLowerCase().includes(searchQuery.toLowerCase()) &&
      (activeCategory === 'All Apps' || app.category === activeCategory)
  );

  return (
    <Box sx={{ position: 'relative', minHeight: '100vh', pb: 16 }}>
      <CssBaseline />
      {activeApp ? (
        <Paper
          sx={{
            height: 'calc(100vh - 20vh)',
            overflow: 'hidden',
            display: 'flex',
            flexDirection: 'column',
          }}
        >
          <Box
            sx={{
              p: 2,
              bgcolor: 'grey.900',
              color: 'white',
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
            }}
          >
            <Typography variant="h6">{activeApp.name}</Typography>
            <Button
              variant="contained"
              color="inherit"
              onClick={() => setActiveApp(null)}
            >
              Back to Apps
            </Button>
          </Box>
          <AppGateway appUrl={activeApp.url} />
        </Paper>
      ) : (
        <Box
          sx={{
            display: 'grid',
            gridTemplateColumns: {
              xs: '1fr',
              sm: 'repeat(2, 1fr)',
              md: 'repeat(3, 1fr)',
              lg: 'repeat(4, 1fr)',
            },
            gap: 2,
            p: 2,
          }}
        >
          {filteredApps.map((app) => (
            <Card
              key={app.id}
              sx={{
                cursor: 'pointer',
                '&:hover': { boxShadow: 6 },
              }}
              onClick={() => setActiveApp(app)}
            >
              <CardContent
                sx={{
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                }}
              >
                <CardMedia
                  component="img"
                  sx={{ width: 64, height: 64, borderRadius: 1, mb: 1 }}
                  image="/api/placeholder/64/64"
                  alt={app.name}
                />
                <Typography variant="subtitle2">{app.name}</Typography>
                <Typography variant="caption" color="text.secondary">
                  {app.category}
                </Typography>
              </CardContent>
            </Card>
          ))}
        </Box>
      )}

      {/* FooterArea wraps the CircularNavigator.
          The navigator remains hidden until the user hovers over the bottom area. */}
      <EnhancedFooter>
        <CircularNavigator
          onCategorySelect={setActiveCategory}
          activeCategory={activeCategory}
        />
      </EnhancedFooter>
    </Box>
  );
};

export default DashboardGateway;
