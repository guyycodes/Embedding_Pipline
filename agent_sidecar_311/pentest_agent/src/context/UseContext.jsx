import React, { useContext, useReducer, useState } from "react";
import { Modal, Box, Button, Typography, Link } from '@mui/material';
import { styled } from '@mui/material/styles';
import { TextField, IconButton } from '@mui/material';
import { Visibility, VisibilityOff } from '@mui/icons-material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { FaGoogle, FaWindows } from 'react-icons/fa';
import { Close as CloseIcon } from '@mui/icons-material';

const context = React.createContext();

export const useGlobalContext = () => useContext(context);

// Style the modal content
const ModalContent = styled(Box)(({ theme }) => ({
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  width: '90%',
  maxWidth: 400,
  minHeight: 400,
  backgroundColor: '#000000',
  borderRadius: '25px',
  boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
  padding: theme.spacing(4),
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  justifyContent: 'space-between',
  background: 'linear-gradient(to right, rgba(0,0,0,0.95), rgba(0,0,0,0.98))',
  border: '1px solid rgba(255,255,255,0.1)',
}));

const GradientButton = styled(Button)(({ theme }) => ({
  width: '100%',
  height: 50,
  borderRadius: 25,
  marginBottom: theme.spacing(2),
  color: '#ffffff',
  position: 'relative',
  overflow: 'hidden',
  '&::before': {
    content: '""',
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    background: 'linear-gradient(45deg, #00FF41, #008F11)',
    opacity: 0.8,
    transition: 'opacity 0.3s ease',
  },
  '&:hover::before': {
    opacity: 1,
  },
  '& span': {
    position: 'relative',
    zIndex: 1,
  },
}));

const reducer = (state, action) => {
    switch (action.type) {
        case 'SET_USER':
            return { ...state, user: action.payload };
        case 'SET_TOKEN':
            return { ...state, token: action.payload };
        case 'SET_IS_LOGGED_IN':
            return { ...state, isLoggedIn: action.payload };
        case 'SET_IS_ADMIN':
            return { ...state, isAdmin: action.payload };
        case 'TOGGLE_AUTH_MODAL':
            return { ...state, showAuthModal: action.payload };
        default:
            return state;
    }
}

export const ContextProvider = ({ children }) => {
    
    const [isSigningUp, setIsSigningUp] = useState(false);
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    const [organization, setOrganization] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [errorMessages, setErrorMessages] = useState([]);
    const [loading, setLoading] = useState(false);
    const [userToggled, setUserToggled] = useState(false)
    const [forgotPassword, setForgotPassword] = useState(false)

    const [state, dispatch] = useReducer(reducer, {
        user: null,
        token: null,
        isLoggedIn: false,
        isAdmin: false,
        showAuthModal: false
    });

    const handleLogin = () => {
        console.log("Navigate to login");
        setUserToggled(true);
        // Add your login logic here
    };

    const handleSignup = () => {
        setIsSigningUp(true);  // This is the key change
    };

    const handleSignUpWithEmail = async () => {
        // Add your signup logic here
        console.log('Processing signup with:', { email, password, firstName, lastName });
    };

    const handleGoogleLogin = () =>{
        console.log("Navigate to google login");
    }

    const handleMicrosoftLogin = () =>{
        console.log("Navigate to microsoft login");
    }

    const handleForgotPassword =() =>{
        setForgotPassword(true)
        console.log("Navigate to forgot password");
    }

    const handleUserLoggingIn = () =>{
        console.log('Processing signup with:', { email, password});
    }

    const handleSendResetLink = () => {
        console.log('Processing signup with:', { email });
    }

    return (
        <LocalizationProvider dateAdapter={AdapterDayjs}>
        <context.Provider value={{ 
            state, 
            dispatch,
            // Add all these to the context value
            isSigningUp,
            setIsSigningUp,
            email,
            setEmail,
            password,
            setPassword,
            firstName,
            setFirstName,
            lastName,
            setLastName,
            showPassword,
            setShowPassword,
            organization,
            setOrganization,
            loading,
            errorMessages,
            handleLogin,
            handleSignup,
            handleSignUpWithEmail
        }}>
            {children}
            <Modal
                open={state.showAuthModal}
                onClose={() => dispatch({ type: 'TOGGLE_AUTH_MODAL', payload: false })}
                aria-labelledby="auth-modal"
                aria-describedby="authentication-modal"
            >
                <ModalContent 
                    sx={{
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center',
                    justifyContent: 'flex-start',
                    border: '1px solid white',
                    maxHeight: '90vh',
                    overflowY: 'auto'
                    }}
                >
                    {/* Logo Section - position: 'relative' allows absolute positioning of the close button */}
                    <Box sx={{ 
                    width: '100%', 
                    height: '150px',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    mb: 4,
                    position: 'relative'
                    }}>
                    {/* === THE RED 'X' CLOSE BUTTON === */}
                    <IconButton
                        onClick={() => dispatch({ type: 'TOGGLE_AUTH_MODAL', payload: false })}
                        sx={{
                        position: 'absolute',
                        top: 0,
                        right: 0,
                        color: '#ff4444' // or simply "red"
                        }}
                        aria-label="close"
                    >
                        <CloseIcon fontSize="medium" />
                    </IconButton>

                    <Typography 
                        variant="h2" 
                        sx={{
                        fontFamily: "'Playfair Display', serif",
                        fontWeight: 700,
                        color: 'rgba(255,255,255,0.7)',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        letterSpacing: '2px',
                        textShadow: '2px 2px 4px rgba(0,0,0,0.5)',
                        position: 'relative',
                        '& span': {
                            fontSize: '4rem',
                            marginRight: '12px',
                        }
                        }}
                    >
                        <span>A</span>rchitect
                    </Typography>
                    </Box>

                    {/* Content Section */}
                    <Box sx={{ width: '100%' }}>
                        {isSigningUp ? (
                            // Signup Form
                            <Box sx={{
                                display: 'flex',
                                flexDirection: 'column',
                                gap: 2,
                                width: '100%',
                                px: 2
                            }}>
                                {/* Error Messages */}
                                {errorMessages.length > 0 && (
                                    <Box sx={{ mb: 2 }}>
                                        {errorMessages.map((msg, index) => (
                                            <Typography 
                                                key={index} 
                                                sx={{ 
                                                    color: '#ff4444',
                                                    fontSize: '0.875rem',
                                                    textAlign: 'center'
                                                }}
                                            >
                                                {msg}
                                            </Typography>
                                        ))}
                                    </Box>
                                )}

                                <TextField
                                    fullWidth
                                    label="Email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    sx={{
                                        '& .MuiOutlinedInput-root': {
                                            color: 'white',
                                            '& fieldset': {
                                                borderColor: 'rgba(255, 255, 255, 0.23)',
                                            },
                                            '&:hover fieldset': {
                                                borderColor: 'rgba(255, 255, 255, 0.5)',
                                            },
                                        },
                                        '& .MuiInputLabel-root': {
                                            color: 'rgba(255, 255, 255, 0.7)',
                                        },
                                    }}
                                />

                                <TextField
                                    fullWidth
                                    label="Password"
                                    type={showPassword ? 'text' : 'password'}
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    InputProps={{
                                        endAdornment: (
                                            <IconButton
                                                onClick={() => setShowPassword(!showPassword)}
                                                edge="end"
                                                sx={{ color: 'rgba(255, 255, 255, 0.7)' }}
                                            >
                                                {showPassword ? <VisibilityOff /> : <Visibility />}
                                            </IconButton>
                                        )
                                    }}
                                    sx={{
                                        '& .MuiOutlinedInput-root': {
                                            color: 'white',
                                            '& fieldset': {
                                                borderColor: 'rgba(255, 255, 255, 0.23)',
                                            },
                                        }
                                    }}
                                />

                                <TextField
                                    fullWidth
                                    label="First Name"
                                    value={firstName}
                                    onChange={(e) => setFirstName(e.target.value)}
                                    sx={{
                                        '& .MuiOutlinedInput-root': {
                                            color: 'white',
                                            '& fieldset': {
                                                borderColor: 'rgba(255, 255, 255, 0.23)',
                                            },
                                        },
                                        '& .MuiInputLabel-root': {
                                            color: 'rgba(255, 255, 255, 0.7)',
                                        },
                                    }}
                                />

                                <TextField
                                    fullWidth
                                    label="Last Name"
                                    value={lastName}
                                    onChange={(e) => setLastName(e.target.value)}
                                    sx={{
                                        '& .MuiOutlinedInput-root': {
                                            color: 'white',
                                            '& fieldset': {
                                                borderColor: 'rgba(255, 255, 255, 0.23)',
                                            },
                                        },
                                        '& .MuiInputLabel-root': {
                                            color: 'rgba(255, 255, 255, 0.7)',
                                        },
                                    }}
                                />

                                <TextField
                                    fullWidth
                                    label="Organization"
                                    value={organization}
                                    onChange={(e) => setOrganization(e.target.value)}
                                    sx={{
                                        '& .MuiOutlinedInput-root': {
                                            color: 'white',
                                            '& fieldset': {
                                                borderColor: 'rgba(255, 255, 255, 0.23)',
                                            },
                                        },
                                        '& .MuiInputLabel-root': {
                                            color: 'rgba(255, 255, 255, 0.7)',
                                        },
                                    }}
                                />

                                <GradientButton
                                    variant="contained"
                                    onClick={handleSignUpWithEmail}
                                    disabled={loading}
                                    sx={{ mt: 2 }}
                                >
                                    <span>{loading ? 'Processing...' : 'Complete Registration'}</span>
                                </GradientButton>

                                <Button 
                                    onClick={() => {setIsSigningUp(false); setUserToggled(false)}}
                                    sx={{ 
                                        color: 'rgba(255, 255, 255, 0.7)',
                                        mt: 2,
                                        '&:hover': {
                                            color: 'white',
                                            backgroundColor: 'rgba(255, 255, 255, 0.1)'
                                        }
                                    }}
                                >
                                    Back to Access
                                </Button>
                            </Box>
                        ) : (!isSigningUp && userToggled) && !forgotPassword ? (
                            <Box sx={{
                                display: 'flex',
                                flexDirection: 'column',
                                gap: 2,
                                width: '100%',
                                px: 2
                            }}>
                                {/* Enterprise Login Options */}
                                <Box sx={{ 
                                    display: 'flex', 
                                    flexDirection: 'column',
                                    gap: 2,
                                    width: '100%',
                                    mb: 2 
                                }}>
                                    {/* Google Login */}
                                    <GradientButton
                                        variant="contained"
                                        onClick={handleGoogleLogin}
                                        startIcon={<FaGoogle />}
                                        sx={{
                                            backgroundColor: '#fff',
                                            color: '#000',
                                            '&:hover': {
                                                backgroundColor: '#f1f1f1'
                                            }
                                        }}
                                    >
                                        <span>Sign in with Google</span>
                                    </GradientButton>
                        
                                    {/* Microsoft Login */}
                                    <GradientButton
                                        variant="contained"
                                        onClick={handleMicrosoftLogin}
                                        startIcon={<FaWindows />}
                                        sx={{
                                            backgroundColor: '#2F2F2F',
                                            '&:hover': {
                                                backgroundColor: '#404040'
                                            }
                                        }}
                                    >
                                        <span>Sign in with Microsoft</span>
                                    </GradientButton>
                        
                                    {/* Divider */}
                                    <Box sx={{ 
                                        display: 'flex', 
                                        alignItems: 'center',
                                        my: 2 
                                    }}>
                                        <Box sx={{ flex: 1, height: '1px', bgcolor: 'rgba(255,255,255,0.2)' }} />
                                        <Typography sx={{ px: 2, color: 'rgba(255,255,255,0.7)' }}>or</Typography>
                                        <Box sx={{ flex: 1, height: '1px', bgcolor: 'rgba(255,255,255,0.2)' }} />
                                    </Box>
                                </Box>
                        
                                {/* Traditional Login Form */}
                                <TextField
                                    fullWidth
                                    label="Email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    sx={{
                                        '& .MuiOutlinedInput-root': {
                                            color: 'white',
                                            '& fieldset': {
                                                borderColor: 'rgba(255, 255, 255, 0.23)',
                                            },
                                            '&:hover fieldset': {
                                                borderColor: 'rgba(255, 255, 255, 0.5)',
                                            },
                                        },
                                        '& .MuiInputLabel-root': {
                                            color: 'rgba(255, 255, 255, 0.7)',
                                        },
                                    }}
                                />
                        
                                <TextField
                                    fullWidth
                                    label="Password"
                                    type={showPassword ? 'text' : 'password'}
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    InputProps={{
                                        endAdornment: (
                                            <IconButton
                                                onClick={() => setShowPassword(!showPassword)}
                                                edge="end"
                                                sx={{ color: 'rgba(255, 255, 255, 0.7)' }}
                                            >
                                                {showPassword ? <VisibilityOff /> : <Visibility />}
                                            </IconButton>
                                        )
                                    }}
                                    sx={{
                                        '& .MuiOutlinedInput-root': {
                                            color: 'white',
                                            '& fieldset': {
                                                borderColor: 'rgba(255, 255, 255, 0.23)',
                                            },
                                        }
                                    }}
                                />
                        
                                <GradientButton
                                    variant="contained"
                                    onClick={handleUserLoggingIn}
                                    disabled={loading}
                                    sx={{ mt: 2 }}
                                >
                                    <span>{loading ? 'Authenticating...' : 'Access'}</span>
                                </GradientButton>
                        
                                {/* Forgot Password Link */}
                                <Button 
                                    onClick={handleForgotPassword}
                                    sx={{ 
                                        color: 'rgba(255, 255, 255, 0.7)',
                                        mt: 1,
                                        '&:hover': {
                                            color: 'white',
                                            backgroundColor: 'transparent'
                                        }
                                    }}
                                >
                                    Forgot Password?
                                </Button>
                        
                                <Button 
                                    onClick={() => setIsSigningUp(true)}
                                    sx={{ 
                                        color: 'rgba(255, 255, 255, 0.7)',
                                        mt: 1,
                                        '&:hover': {
                                            color: 'white',
                                            backgroundColor: 'rgba(255, 255, 255, 0.1)'
                                        }
                                    }}
                                >
                                    Request New Access
                                </Button>
                            </Box>
                            ) : forgotPassword ? (
                                <Box
                                sx={{
                                    display: 'flex',
                                    flexDirection: 'column',
                                    gap: 2,
                                    width: '100%',
                                    px: 2
                                }}
                                >
                                {/* Title */}
                                <Typography variant="h5" sx={{ color: 'white' }}>
                                    Forgot Password
                                </Typography>

                                {/* Instruction */}
                                <Typography variant="body1" sx={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                                    Enter your email to reset your password.
                                </Typography>

                                {/* Email Text Field */}
                                <TextField
                                    fullWidth
                                    label="Email"
                                    type="email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    sx={{
                                    '& .MuiOutlinedInput-root': {
                                        color: 'white',
                                        '& fieldset': {
                                        borderColor: 'rgba(255, 255, 255, 0.23)',
                                        },
                                        '&:hover fieldset': {
                                        borderColor: 'rgba(255, 255, 255, 0.5)',
                                        },
                                    },
                                    '& .MuiInputLabel-root': {
                                        color: 'rgba(255, 255, 255, 0.7)',
                                    },
                                    }}
                                />

                                {/* Send Reset Link */}
                                <GradientButton
                                    variant="contained"
                                    onClick={handleSendResetLink}
                                    color="white"
                                    sx={{
                                        backgroundColor: '#2F2F2F',
                                        '&:hover': {
                                            backgroundColor: '#404040'
                                        }
                                    }}
                                >
                                   <span>Send Reset Link</span>
                                </GradientButton>

                                {/* Back to Login */}
                                <Button
                                    onClick={ () => setUserToggled(false)}
                                    sx={{
                                    color: 'rgba(255, 255, 255, 0.7)',
                                    mt: 1,
                                    '&:hover': {
                                        color: 'white',
                                        backgroundColor: 'transparent'
                                    }
                                    }}
                                >
                                    Back
                                </Button>
                                </Box>
                        ) : (
                            // Original Login/Signup Buttons
                            <>
                                <GradientButton 
                                    variant="contained" 
                                    onClick={handleLogin}
                                    sx={{ mb: 2 }}
                                >
                                    <span>Access</span>
                                </GradientButton>
                                <Typography 
                                    sx={{ 
                                        textAlign: 'center', 
                                        color: 'rgba(255,255,255,0.7)',
                                        mb: 3,
                                        fontSize: '0.9rem'
                                    }}
                                >
                                    Authorized Personnel Only
                                </Typography>

                                <GradientButton 
                                    variant="contained" 
                                    onClick={() => setIsSigningUp(true)}
                                    sx={{
                                        '&::before': {
                                            background: 'linear-gradient(45deg, #1a6ded, #00e5ff)',
                                        }
                                    }}
                                >
                                    <span>Request</span>
                                </GradientButton>
                                <Typography 
                                    sx={{ 
                                        textAlign: 'center', 
                                        color: 'rgba(255,255,255,0.7)',
                                        mt: 1,
                                        fontSize: '0.9rem'
                                    }}
                                >
                                    New System Registration
                                </Typography>
                            </>
                        )}
                    </Box>
                </ModalContent>
            </Modal>
        </context.Provider>
        </LocalizationProvider>
    )
}